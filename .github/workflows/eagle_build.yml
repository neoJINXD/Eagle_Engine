name: Eagle_Build

on: 
  push:
    branches:
      - "feature/*"
      - "bugfix/*"
      - "main"
    paths:
      - "Eagle/**"
      - "Sandbox/**"
      - "CMakeList.txt"
      - ".github/workflows/eagle_build.yml"
  pull_request:
    branches:
      - "main"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Clang-Format:
    name: Format and Style Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - check: './Eagle'
            exclude: './Eagle/src/Platform/ImGui'
          - check: './Sandbox'
            exclude: ''              # Nothing to exclude
    steps:
    - name: Checkout reposistory and submodules
      uses: actions/checkout@v2
    - name: Run clang-format style check
      uses: DoozyX/clang-format-lint-action@v0.13
      with:
        source: ${{ matrix.path['check'] }}
        exclude: ${{ matrix.path['exclude'] }}
        extensions: 'h,cpp'
        clangFormatVersion: 13
        style: file

  Ubuntu:
    name: Build Ubuntu
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout reposistory and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install OpenGL Binaries
      run: |
        sudo apt-get update
        sudo apt-get -y install xorg-dev libglu1-mesa-dev libgl1-mesa-dev

    - name: Install Vulkan
      run: |
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.170-bionic.list https://packages.lunarg.com/vulkan/1.2.170/lunarg-vulkan-1.2.170-bionic.list
        sudo apt update
        sudo apt install vulkan-sdk

    # - name: Checking OpenGL Version
    #   run: |
    #     sudo add-apt-repository ppa:ubuntu-x-swat/updates
    #     xvfb-run sudo apt-get install mesa-utils
    #     glxinfo | grep "OpenGL version"
    #   # sudo apt-get upgrade
    #   # sudo apt-get dist-upgrade

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build


    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE


    # - name: Test
    #   working-directory: ${{runner.workspace}}/build
    #   shell: bash
    #   # Execute tests defined by the CMake configuration.  
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C $BUILD_TYPE -VV


  # Windows:

  #   runs-on: windows-latest

  #   steps:
  #     - name: Checkout Repo
  #       run: git clone --recursive https://github.com/neoJINXD/Eagle_Engine.git .
      
  #     - name: Installing Vulkan SDK
  #       run: |
  #         curl -LS -o vulkansdk.exe https://sdk.lunarg.com/sdk/download/1.2.170.0/windows/VulkanSDK-1.2.170.0-Installer.exe?Human=true

  #         7z x vulkansdk.exe -o"vulkan_sdk/"


  #     - name: Test LS
  #       run: ls
        
  #     - name: Create Build Environment
  #       # Some projects don't allow in-source building, so create a separate build directory
  #       # We'll use this as our working directory for all subsequent commands
  #       run: |
  #         $env:Path += ";D:\a\Eagle_Engine\Eagle_Engine\vulkan_sdk\;D:\a\Eagle_Engine\Eagle_Engine\vulkan_sdk\Bin\"
  #         cmake -E make_directory ${{runner.workspace}}/build


  #     - name: Configure CMake
  #       # Use a bash shell so we can use the same syntax for environment variable
  #       # access regardless of the host operating system
  #       shell: bash
  #       working-directory: ${{runner.workspace}}/build
  #       # Note the current convention is to use the -S and -B options here to specify source 
  #       # and build directories, but this is only available with CMake 3.13 and higher.  
  #       # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
  #       run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

  #     - name: Build
  #       working-directory: ${{runner.workspace}}/build
  #       shell: bash
  #       # Execute the build.  You can specify a specific target with "--target <NAME>"
  #       run: cmake --build . --config $BUILD_TYPE

    